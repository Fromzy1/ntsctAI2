
from dotenv import load_dotenv
import json
from pprint import pprint
import OpenAIClient 
import ElasticTools
import chart_util
load_dotenv()

#Instanciate openAI
LLM = OpenAIClient.Client()

# List of indexes
et = ElasticTools.Tools()
index_dict = et.get_indices_dict() # using dict gives access to indexes by name
#print(type(index_dict))
#print(f"List of Indexes: {index_dict}\n")

# List fields of the index we choose
myIndex = "kafka-application"
schema_fields = et.load_es_index_fields(index_dict[myIndex])
#print(f"List of fields for index {myIndex} : {schema_fields}\n")

# Get schema of the index
schema=et.get_index_schema(index_dict[myIndex])
#print(f"schema of the index: {schema}\n")

# Generate the prompt
# Open the file for the prompt in read mode
with open('prompt_1.txt', 'r') as file:
    content = file.read()
# In the content of the file replace the variable
# Here is the schema that is inserted
prompt=content.format(schema=schema)
#print(f"System Prompt: {prompt}\n")

##
## QUERY TO CHOOSE
##
 
#query="what are the top 6 servers that are consuming biggest bandwidth" 
#query="what are the top 4 servers with most failures" 
query="What is the server IP with the highest number of unique application name "
#query="What are the differrent applications served by IP 13.13.0.0"

print(f"Here is the query: {query}")

# Generate Elasticsearch Query
response=LLM.generate_non_streaming_response(query, system_prompt=prompt)
print(f"Here is the Elasticsearch query generated by LLM:\n {response}")
question = input("Do you want to continue? (yes/no): ").strip().lower()
if question not in ['yes', 'y']:
    print("Exiting...")
    exit() 
es_query=json.loads(response)
#pprint(es_query)

# Launch ES query
search_results = et.search_results(index_dict[myIndex], es_query=es_query)
total_hits = search_results['hits']['total']['value']
#print(f"Total matches: {total_hits}")

# Show the data extracted from the ES query
if "aggs"in es_query:
    data = search_results['aggregations']
    pprint(f"Here is the data found: {data}") # DICT
    #print(type(data))
else:
    data = search_results['hits']['hits']
    pprint(f"Here is the data found: {data}")
    print(type(data))


# Check if there is effective data
if total_hits >0 :
    finalChart = chart_util.ChartUtil()
    finalChart.generate_chart(data)
else :
    print("The query has no data available to graph")
